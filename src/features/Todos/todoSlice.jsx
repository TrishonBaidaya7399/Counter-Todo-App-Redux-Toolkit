/**
 * when you create a thunk with createAsyncThunk, it generates three different action types: pending, fulfilled, and rejected. Each of these action types represents a different stage in the lifecycle of the asynchronous operation that the thunk is performing.
 * 
 * The extraReducers section is a function that takes a builder object, which has methods like addCase and addMatcher that allow you to define how the slice should respond to different actions.
 * 
 * In this case, weâ€™re using builder.addCase to define three cases: pending, fulfilled, and rejected. Each case takes two arguments: the action type, which is generated by the createAsyncThunk function, and a callback function that takes the state and action arguments.

In the pending case, we're setting the status property of the state to "loading". In the fulfilled case, we're setting the status property to "succeeded" and the data property to the payload of the action. In the rejected case, we're setting the status property to "failed" and the error property to the error message of the action.

When the fetchUserData thunk is dispatched, it will trigger the pending case first, then either the fulfilled or rejected case, depending on whether the promise is resolved or rejected.
 */

import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";

export const fetchTodos = createAsyncThunk("todo.fetchTodos", async()=>{
    const res = await axios.get("https://jsonplaceholder.typicode.com/todos")
    return res.data;
})

export const TodoSlice = createSlice({
name: "Todo",
initialState : {isLoading: true, todo:[], error: ""},
reducers:{},
extraReducers: (builder)=>{
    builder.addCase(fetchTodos.pending, (state)=>{
        state.isLoading = true
    })
    builder.addCase(fetchTodos.fulfilled, (state, action)=>{
        state.isLoading = false,
        state.todo = action.payload
    })
    builder.addCase(fetchTodos.rejected, (state, action)=>{
        state.isLoading = false,
        state.error= action.error
    })
}

})

export default TodoSlice.reducer;

